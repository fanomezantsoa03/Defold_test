function init(self)
	msg.post(".", "acquire_input_focus")
	self.base_speed = 500
	self.run_speed = 600
	self.speed = self.base_speed
	self.dir = 0
	self.moving = false
	self.running = false

	-- Attaque
	self.attack_index = 1
	self.attacking = false
	self.attack_queued = false
	self.input_window_open = false -- fenêtre pour permettre le combo
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- -- mouvement
	-- local pos = go.get_position()
	-- pos.x = pos.x + self.dir * self.speed * dt
	-- go.set_position(pos)
	-- 
	-- -- Gestion de l'animation selon la direction
	-- if self.dir ~= 0 then
	-- 	local anim = self.running and "Run" or "Walk"
	-- 	if not self.moving or self.current_anim ~= anim then
	-- 		sprite.play_flipbook("#sprite", anim)
	-- 		self.current_anim = anim
	-- 		self.moving = true
	-- 	end
	-- else
	-- 	if self.moving then
	-- 		sprite.play_flipbook("#sprite", "Idle")
	-- 		self.current_anim = "Idle"
	-- 		self.moving = false
	-- 	end
	-- end

	-- combo reset timer
	-- if self.attacking then
	-- 	self.attack_timer = self.attack_timer + dt
	-- 	if self.attack_timer >= self.combo_timeout then
	-- 		self.attack_index = 1
	-- 		self.attacking = false
	-- 		sprite.play_flipbook("#sprite", "Idle")
	-- 	end
	-- end
	-- if self.attacking then
	-- 	self.attack_timer = self.attack_timer + dt
	-- 	if self.attack_timer >= self.combo_timeout and not self.attack_queued then
	-- 		self.attack_index = 1
	-- 		self.attacking = false
	-- 		sprite.play_flipbook("#sprite", "Idle")
	-- 	end
	-- end

	-- 🔒 Bloquer les mouvements si on attaque
	if not self.attacking then
		local pos = go.get_position()
		pos.x = pos.x + self.dir * self.speed * dt
		go.set_position(pos)

		-- Animations mouvement
		if self.dir ~= 0 then
			local anim = self.running and "Run" or "Walk"
			if not self.moving or self.current_anim ~= anim then
				sprite.play_flipbook("#sprite", anim)
				self.current_anim = anim
				self.moving = true
			end
		else
			if self.moving then
				sprite.play_flipbook("#sprite", "Idle")
				self.current_anim = "Idle"
				self.moving = false
			end
		end
	end
end

function fixed_update(self, dt)

end

function start_attack(self)
	self.attacking = true
	self.input_window_open = false
	local anim = "Attack" .. self.attack_index
	print("▶️ Lancement de " .. anim)
	sprite.play_flipbook("#sprite", anim, function()
		print("✅ Fin animation " .. anim)
		self.input_window_open = false
		msg.post(".", "attack_continue")
	end)

	-- ⏱️ Ouvre la fenêtre d’input après un petit temps (ex: 0.2s)
	timer.delay(0.2, false, function()
		self.input_window_open = true
		print("⏳ Fenêtre combo ouverte")
	end)
end

function on_message(self, message_id, message, sender)
	print("📩 message reçu:", message_id)

	-- if message_id == hash("attack_continue") then
	-- 	print("➡️ Lancement combo suivant : Attack" .. self.attack_index)
	-- 	-- Rejoue l'animation suivante
	-- 	self.attacking = true
	-- 	self.attack_timer = 0
	-- 	local anim = "Attack" .. self.attack_index
	-- 	sprite.play_flipbook("#sprite", anim, function()
	-- 		self.attacking = false
	-- 		if self.attack_queued then
	-- 			self.attack_index = self.attack_index % 3 + 1
	-- 			self.attack_queued = false
	-- 			print("✅ Animation terminée, envoi du message pour l'attaque suivante")
	-- 			msg.post(".", "attack_continue")
	-- 		else
	-- 			self.attack_index = 1
	-- 			sprite.play_flipbook("#sprite", "Idle")
	-- 		end
	-- 	end)
	-- end
	if message_id == hash("attack_continue") then
		if self.attack_queued then
			self.attack_index = self.attack_index % 3 + 1
			self.attack_queued = false
			start_attack(self)
		else
			print("🛑 Combo terminé")
			self.attacking = false
			self.attack_index = 1
			sprite.play_flipbook("#sprite", "Idle")
		end
	end
end

function on_input(self, action_id, action)
	-- Shift pressé ? Active le mode course
	if action_id == hash("shift") then
		if action.pressed then
			self.running = true
			self.speed = self.run_speed
		elseif action.released then
			self.running = false
			self.speed = self.base_speed
		end
	end

	-- Direction
	if action_id == hash("left") and action.pressed then
		self.dir = -1
		sprite.set_hflip("#sprite", true)
	elseif action_id == hash("right") and action.pressed then
		self.dir = 1
		sprite.set_hflip("#sprite", false)
	elseif action.released and (action_id == hash("left") or action_id == hash("right")) then
		self.dir = 0
	end

	-- Attack
	-- if action_id == hash("attack") and action.pressed then
	-- 	if not self.attacking then
	-- 		self.attacking = true
	-- 		self.attack_timer = 0
	-- 		local anim = "Attack" .. self.attack_index
	-- 		sprite.play_flipbook("#sprite", anim, function()
	-- 			self.attacking = false
	-- 			self.attack_index = self.attack_index % 3 + 1 -- va de 1 à 3 en boucle
	-- 		end)
	-- 	end
	-- end
	-- if action_id == hash("attack") and action.pressed then
	-- 	if not self.attacking then
	-- 		self.attacking = true
	-- 		self.attack_timer = 0
	-- 		local anim = "Attack" .. self.attack_index
	-- 		sprite.play_flipbook("#sprite", anim, function()
	-- 			self.attacking = false
	-- 			if self.attack_queued then
	-- 				self.attack_index = self.attack_index % 3 + 1
	-- 				self.attack_queued = false
	-- 				msg.post(".", "attack_continue") -- message pour relancer
	-- 			else
	-- 				self.attack_index = 1
	-- 				sprite.play_flipbook("#sprite", "Idle")
	-- 			end
	-- 		end)
	-- 	else
	-- 		-- Si on est déjà en train d'attaquer, on stocke la suite
	-- 		self.attack_queued = true
	-- 	end
	-- end
	if action_id == hash("attack") and action.pressed then
		if not self.attacking then
			start_attack(self)
		elseif self.input_window_open then
			self.attack_queued = true
			print("🕹️ Input reçu dans la fenêtre pour combo !")
		end
	end
	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
